---
description: "Frontend development standards - Apply when working on frontend/React"
globs: ["**/*.tsx", "**/*.ts", "frontend/**/*", "**/*.json", "**/*.js", "**/*.jsx"]
alwaysApply: false
contextTriggers: ["frontend", "react", "nextjs", "typescript", "ui", "shadcn", "radix"]
priority: "high"
---

# Frontend Development Rules

- **Task Completion**: All frontend work must follow the completion requirements defined in `09-task-completion-requirements.mdc`, including mandatory trunk checks and documentation updates.

- **Framework**: All frontend pages and components must be built using Next.js 14 with App Router and React.

- **Type Safety Example**:
  ```tsx
  // Good: Explicitly typed props
  interface UserCardProps {
    user: {
      id: number;
      name: string;
      email: string;
    };
    onEdit: (userId: number) => void;
    className?: string;
  }
  
  export function UserCard({ user, onEdit, className }: UserCardProps) {
    return (
      <div className={cn("border rounded p-4", className)}>
        <h3>{user.name}</h3>
        <p>{user.email}</p>
        <Button onClick={() => onEdit(user.id)}>Edit</Button>
      </div>
    );
  }
  
  // Bad: Using any type
  interface UserCardProps {
    user: any;
    onEdit: any;
    className?: any;
  }
  
  export function UserCard(props: any) {
    return <div>{props.user.name}</div>;
  }
  ```

- **Styling**: Use Tailwind CSS with utility-first approach for all styling. Do not write custom CSS or module CSS files unless creating a base style layer.

- **State Management**: Use Zustand for all global and cross-component state. For server state (data fetching, caching, mutation), use React Query.

- **UI Components**: Use Shadcn UI with Radix UI primitives for a customizable, accessible component system. Build upon these foundations rather than creating custom components from scratch.

- **Component Naming**: Follow the PascalCase.tsx naming convention for all component files.

- **Hooks**: Custom hooks should be placed in a dedicated /hooks directory and be prefixed with use, e.g., useUserData.ts.

- **Documentation**: All documentation files (except README.md) must be placed in the /docs folder. This includes component documentation, architectural decisions, setup guides, and any other project documentation.

- **Authentication Implementation**:
  - **Frontend Role**: The frontend's role is to send credentials to the backend and securely store the returned JWT (e.g., via HTTP-only cookies)
  - **No Specific Library**: A specific frontend authentication library isn't required as secure authentication relies on backend logic
  - **Form Validation**: Implement complete login/register forms with proper validation

- **Professional Standards**:
  - **Code Integrity**: All code must be robust, secure, and production-ready
  - **Component-Based Architecture**: Use modular, reusable components with clear separation of concerns
  - **Type Safety**: Use TypeScript with strict mode and explicit type definitions
  - **Performance Optimization**: Ensure minimal load times and smooth user interactions
  - **Dead Code Removal**: Remove all unused components, imports, and styles
  - **Self-Documenting**: All components and architectural decisions must be self-documenting
  - **No Placeholders**: Never leave TODO comments, placeholder components, or incomplete implementations
  - **Full Implementation**: Every component and feature must be fully functional
